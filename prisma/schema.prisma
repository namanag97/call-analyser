// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Recording {
  id          String        @id @default(uuid())
  filename    String
  filepath    String
  filesize    Int
  contentHash String?       @unique // SHA-256 hash for deduplication
  duration    String?
  agent       String?       @default("Unassigned")
  callType    String?       @default("Unclassified")
  status      String        @default("processing") // processing, COMPLETED, FAILED_TRANSCRIPTION, PENDING_TRANSCRIPTION, TRANSCRIBING
  source      String        @default("upload") // upload, s3
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  transcription Transcription?
  transcriptionLock TranscriptionLock?
}

model Transcription {
  id            String      @id @default(uuid())
  recordingId   String      @unique
  recording     Recording   @relation(fields: [recordingId], references: [id], onDelete: Cascade)
  status        String      @default("pending") // pending, processing, completed, error
  text          String?     @db.Text
  language      String      @default("en")
  speakers      Int?
  processingTimeMs Int?     // Time taken to transcribe in milliseconds
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  error         String?     @db.Text
}

// Transcription lock to prevent duplicate processing
model TranscriptionLock {
  recordingId   String      @id
  recording     Recording   @relation(fields: [recordingId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
}

model TranscriptionSettings {
  id            String      @id @default(uuid())
  apiKey        String
  modelId       String      @default("scribe_v1")
  language      String      @default("en")
  active        Boolean     @default(true)
  batchSize     Int         @default(5)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}