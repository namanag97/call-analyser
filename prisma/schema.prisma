// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RecordingStatus {
  UPLOADED
  PENDING_TRANSCRIPTION
  TRANSCRIBING
  COMPLETED
  FAILED_TRANSCRIPTION
  DUPLICATE
}

enum RecordingSource {
  UPLOAD
  S3
}

enum TranscriptionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model Recording {
  id          String           @id @default(uuid())
  filename    String
  filepath    String           // Path to the stored file
  filesize    Int
  contentHash String?          @unique // SHA-256 hash for deduplication
  duration    Int?             // Duration in seconds
  agent       String?          @default("Unassigned")
  callType    String?          @default("Unclassified")
  status      RecordingStatus  @default(UPLOADED)
  source      RecordingSource  @default(UPLOAD)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  transcription Transcription?
}

model Transcription {
  id              String              @id @default(uuid())
  recordingId     String              @unique
  recording       Recording           @relation(fields: [recordingId], references: [id], onDelete: Cascade)
  status          TranscriptionStatus @default(PENDING)
  text            String?             @db.Text
  language        String              @default("en")
  speakers        Int?
  segments        Json?               // Array of { speaker: string, start_seconds: float, end_seconds: float, text: string }
  processingTimeMs Int?               // Processing time in milliseconds
  modelId         String?             // The model used for transcription
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  error           String?             @db.Text
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("user") // user, admin
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}